{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactDev\\\\music-player\\\\src\\\\components\\\\Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faAngleRight, faAngleLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = _ref => {\n  _s();\n\n  let {\n    currentSong,\n    isPlaying,\n    setIsPlaying\n  } = _ref;\n  const audioRef = useRef(null);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: null,\n    duration: null\n  });\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  };\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  };\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        name: \"player\",\n        id: \"player\",\n        max: songInfo.duration,\n        min: 0,\n        onChange: dragHandler,\n        value: songInfo.currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faAngleLeft,\n        size: \"2x\",\n        className: \"previous-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: isPlaying ? faPause : faPlay,\n        size: \"2x\",\n        className: \"play-button\",\n        onClick: playSongHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faAngleRight,\n        size: \"2x\",\n        className: \"next-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audioFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"6cn0udpjwD7br8FxuF6mw2QdYmc=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["D:/ReactDev/music-player/src/components/Player.js"],"names":["React","useRef","useState","FontAwesomeIcon","faPlay","faPause","faAngleRight","faAngleLeft","Player","currentSong","isPlaying","setIsPlaying","audioRef","songInfo","setSongInfo","currentTime","duration","playSongHandler","current","pause","play","getTime","time","Math","floor","slice","timeUpdateHandler","e","target","dragHandler","value","audioFile"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faPause,\r\n  faAngleRight,\r\n  faAngleLeft,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({ currentSong, isPlaying, setIsPlaying }) => {\r\n  const audioRef = useRef(null);\r\n\r\n  const [songInfo, setSongInfo] = useState({\r\n    currentTime: null,\r\n    duration: null,\r\n  });\r\n\r\n  const playSongHandler = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n      setIsPlaying(!isPlaying);\r\n    } else {\r\n      audioRef.current.play();\r\n      setIsPlaying(!isPlaying);\r\n    }\r\n  };\r\n\r\n  const getTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n\r\n  const timeUpdateHandler = (e) => {\r\n    const current = e.target.currentTime;\r\n    const duration = e.target.duration;\r\n    setSongInfo({ ...songInfo, currentTime: current, duration });\r\n  };\r\n\r\n  const dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n  };\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{getTime(songInfo.currentTime)}</p>\r\n        <input\r\n          type=\"range\"\r\n          name=\"player\"\r\n          id=\"player\"\r\n          max={songInfo.duration}\r\n          min={0}\r\n          onChange={dragHandler}\r\n          value={songInfo.currentTime}\r\n        />\r\n        <p>{getTime(songInfo.duration)}</p>\r\n      </div>\r\n      <div className=\"play-control\">\r\n        <FontAwesomeIcon\r\n          icon={faAngleLeft}\r\n          size=\"2x\"\r\n          className=\"previous-button\"\r\n        />\r\n        <FontAwesomeIcon\r\n          icon={isPlaying ? faPause : faPlay}\r\n          size=\"2x\"\r\n          className=\"play-button\"\r\n          onClick={playSongHandler}\r\n        />\r\n        <FontAwesomeIcon\r\n          icon={faAngleRight}\r\n          size=\"2x\"\r\n          className=\"next-button\"\r\n        />\r\n      </div>\r\n      <audio\r\n        onTimeUpdate={timeUpdateHandler}\r\n        onLoadedMetadata={timeUpdateHandler}\r\n        ref={audioRef}\r\n        src={currentSong.audioFile}></audio>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n"]},"metadata":{},"sourceType":"module"}